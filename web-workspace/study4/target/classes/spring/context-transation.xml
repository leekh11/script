<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.3.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.3.xsd">
	<!--context-transaction.xml  -->
	<!-- 트랜잭션 매니저 빈 등록  -->
	<bean id="transactionManager"
		  class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		  <property name="dataSource" ref="dataSource"/>
	</bean>
	
	<!-- read-only : 읽기전용 설정
					 true 인 경우 DML(insert, update, delete) 가 존재하면
					 오류가 발생할 수 도 있다. 
		rollback-for : 기본적으로 RuntimeException 만 롤백을 합니다.
					   만약 체크드 익셉션중에서 롤백을 하고싶으면 기술
	-->
	
	
	<!-- 트랜잭션의 상세 제어를 위한 메서드의 룰 설정 -->
	<tx:advice id="txAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<tx:method name="get*" read-only="true"/>
			<tx:method name="select*" read-only="true"/>
			<tx:method name="*" rollback-for="Exception"/>
		</tx:attributes>
	</tx:advice>
	
	<!-- 트랜잭션을 처리할 메서드 등록 -->
	<aop:config>
		<aop:pointcut id="servicePointcut" 
					  expression="execution(public * com.study..service.*Impl.*(..))" />
		<aop:advisor advice-ref="txAdvice" pointcut-ref="servicePointcut"/>
	</aop:config>
	
	
</beans>
